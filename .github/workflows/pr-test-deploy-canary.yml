name: PR Test, Deploy and Canary Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: 
      - 'master' # Adjust this to include the branches where you want this workflow to run

jobs:
  test-on-pr-approval:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Test on Test Machines
        run: |
          echo "Running tests on test machines..."
      
          # Insert your command to run tests on the test machines
          # For example, using salt-ssh or another tool to execute your tests

  deploy-and-test-canary:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    needs: test-on-pr-approval
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Checkout PR
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Retrieve PR Content
        run: |
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > pr_files.txt
          cat pr_files.txt

      - name: Install Teleport SSH client (tsh)
        run: |
          wget https://github.com/gravitational/teleport/releases/latest/download/teleport-v7.2.10-linux-amd64-bin.tar.gz
          tar xzf teleport-v7.2.10-linux-amd64-bin.tar.gz
          sudo mv teleport /usr/local/bin/tsh
        shell: bash

      - name: Login to teleport Server
        run: |
          tsh login --proxy teleport.netskope.io
        env:
          TELEPORT_USERNAME: ${{ secrets.TELEPORT_USERNAME }}
          TELEPORT_PASSWORD: ${{ secrets.TELEPORT_PASSWORD }}

      - name: Run Blast Radius Check
        id: check_blast_radius
        run: |
          set -x
          # ... previous python checks ...
          output=$(python check_blast_radius.py --debug)
          affected_states=$(echo "$output" | jq -r '.affected_states[]')
          echo "AFFECTED_STATES=$affected_states" >> $GITHUB_ENV
        shell: bash
        env:
          TOP_SLS: ${{ env.RENDERED_TOP_SLS }}
      
      - name: Debug Environment Variables
        run: env    

      - name: Run Tests on Canary Machines
        env:
          CANARY_MACHINES: ${{ secrets.CANARY_MACHINES }}
        run: |
          echo "Running tests on canary machines:"
          IFS=', ' read -r -a machines <<< "${CANARY_MACHINES}"
          for hostname_fqdn in "${machines[@]}"; do
              clustername=$(echo "$hostname_fqdn" | awk -F. '{print $2}')
              
              echo "Accessing $hostname_fqdn on cluster $clustername"
              
              # Use tsh ssh with extracted clustername and hostname
              tsh ssh -c "$clustername" "$hostname_fqdn" -- "echo 'Running tests on $hostname_fqdn' && salt-call state.apply $AFFECTED_STATES"

              # Check the execution status and handle errors if necessary
              if [ $? -ne 0 ]; then
                  echo "Tests failed on $fullname" >&2
                  exit 1
              else
                  echo "Tests passed on $fullname"
              fi
          done

      - name: Post Test Results to PR
        uses: actions/github-script@v5
        if: always()
        with:
          script: |
            const deploymentStatus = '${{ job.status }}';
            const message = deploymentStatus === 'success'
              ? 'ðŸŸ¢ Canary deployment and tests completed successfully.'
              : 'ðŸ”´ Canary deployment and tests failed. Check the logs for details.';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            })
